arm 汇编相关

arm是一家做arm架构处理器的公司
他们主要是负责架构的设计，实际的生产和改造则通过让第三方公司来购买授权的方式进行

现在大多说的手机cpu 是指代 SoC
soc中包含了传统意义上的cpu
也包含很多曾经单独出现在手机上的子芯片，例如AD

SoC的有几个arm官方的基准架构如 Cortex-A9，ARM7,ARM9
苹果买了arm的架构后命名了如 A11 这样的芯片

SoC中真正cpu的部分，其架构有 ARMv7，ARMv7s，ARMv8 等

注意命名中的 v 字，不含一个代表SOC，含代表CPU架构


从ARM11往后开始用CORTEX命名soc
cortext-A -R -M
-A系列手机中常用
-R主要用于实时系统（估计汽车中的自动驾驶）
-M用于低成本低功耗嵌入式（估计自行车中用）

其中从cortex-A32 开始，内嵌的cpu开始使用ARMv8-A架构
也就是说从 cortext-A32开始，soc中cpu才是64位的
不讨论大小核


再来看看cpu架构中的演进过程

		32bit			64bit
架构    	?-ARMv7			ARMv8-?
通用寄存器	r0~r15(16个32bit)	x0~x31(32个64bit)
指令集		A32+Thumb		A64+A32+Thumb
Execution State *1			AArch32+AArch64 （A32和A64状态切换）


--架构的寄存器区别
*1
AArch32		r0-r15 32bit 16个（包含pc，sp），	 ELR 32bit，	 SIMD 64bit 32个，指令集 A32+Thumb
AArch64		x0-x30 64bit 32个,		 PC SPx ,ELRx 64bit 3个，SIMD 128bit 32个，ELx（x<4)异常等级


通用 额外 SIMD 其他
16 + 2 + 1 + 32
32 + 3 + 1 + 32

把sp和pc拿出来了

r0-r15(sp,lr,pc)
cpsr
spsr

d0-d31
fpscr
q0-q15
fpsid
fpexc
s0-s31


----32bit cpu
ARMv7
7个模式
r0-r15 + cpsr + spsr + ...
r13 sp
r14 lr
r15 pc

cpsr
spsr


----64bit cpu
9个模式 + EL4个模式

w0-w30 + cpsr + spsr + ...
w30 lr
pc 单独
sp 单独


x0-x30
sp
pc
cpsr

v0-v31

fpsr
fpcr

q0-q31
d0-d31
s0-s31
h0-h31
b0-b31



架构新增了31个64bit通用寄存器
64bit cpu
ARMv8开始
x0~x30（或叫做 W0~W30）

堆栈指针寄存器（SP或WSP）以及指令指针寄存器IP都是独立的，这个与32位的不同（R13为堆栈指针寄存器，R15作为指令指针寄存器）

参数传递 64bit 可以用8个寄存器传递函数参数X0~X7



M[4:0]
user 0
10000

fiq  1
10001

irq  2
10010

svc  3
10011

abr  7
10111

und  11 0xb
11011

sys  15 0xf
11111



1.
2.Execution State （A32-T32-T16  A64）
3.Exception Level  （EL0-EL3)
	3.1.Security
4.Register
5.Exception Mode
6.Armv8 指令集
	6.1.A64
	6.2.A32-T32
7.流水线



ARMv8异常等级ELx（x<4）
AArch32和AArch64之间的切换只能通过发生异常或者系统Reset来实现.
（A32 -> T32之间是通过BX指令切换的）


EL0 像是 X86的 ring3
EL1 X86 的 ring0
还有EL2,3 是可选的
reset时默认EL3

APP
OS
HYPERVISOR
MONITOR


所以在A64状态下，想要使用thumb 只能通过系统reset或异常切换到A32
然后再用BX指令切换到Thumb




还新增32个128bit Registers，用作执行SIMD

https://blog.csdn.net/forever_2015/article/details/50285865


SPSR_EL1 M[4] 0=64bit 1=32bit





===========

用qemu 做实验的话
要用arrch64-softmmu 版本
才支持选择64位cpu
-cpu help 选项查看支持的soc 手动选coretex-a32以上的就是
然后gdb 进去 用 i r a 能看到寄存器对不对



=============

常用指令


<Opcode>{<Cond>}<S>  <Rd>, <Rn> {,<Opcode2>}
操作码
条件执行
S 是否影响spsr

Opcode2  立即数 寄存器Rm 寄存器移位方式


1.A64指令编码宽度固定32bit
2.寄存器名使用5bit编码
3.PC指针不能作为数据处理指或load指令的目的寄存器，X30通常用作LR
4.相比A32少了很多条件执行指令，只有【条件跳转】和【少数数据处理】这类指令才有条件执行
5.大部分A64指令都有32/64位两种形式


1.寄存器操作 寻址 传数 内存访问 （A64没有LDM/STM指令）。load/store {批量寄存器、单个寄存器、一对寄存器、非-暂存、非特权、独占}。load-Acquire、store-Release
2.运算器操作 数学运算 比较
3.控制器操作 跳转 异常


==========
MOV

LDR 单字，半字，字节 访问
STR



LDM 批量访问
STM

ia（increase after）先传输，再地址+4
ib（increase before）先地址+4，再传输
da（decrease after）先传输，再地址-4
db（decrease before）先地址-4，再传输
fd（full decrease）满递减堆栈
ed（empty decrease）空递减堆栈
fa（・・・・・・・） 满递增堆栈
ea（・・・・・・・）空递增堆栈

!表示对寻址用的寄存器，递增或递减后，将最后的值写入寄存器
保存修改





CPSR 的读写方式

MRS 读
MSR 写

==========
ADD R0,R1,R2	R0=R1+R2
SUB R0,R1,R2	R0=R1-R2
AND R0,R1,R2	R0=R1 AND R2
ORR R0,R1,R2	R0=R1 OR R2

===========
B   相对
BX  绝对跳转	最低1位切换Thumb和A32
BL  相对	跳转时保存pc到lr，返回用
BLX 绝对

NZ
Z

NE
EQ


---

CMP 
TST 位比较 


CBZ = CMP + BZ 比较为0 则跳转
TBZ = TST + BZ 比较为0 则跳转

SWI
1.模式改为 SVC ，寄存器 sp 和 lr 会被替换（R13 R14），lr_svc 存储的是用户模式下 swi 这个指令的后续地址，也就是说，在svc模式下，被切换过来的时候，通过读取lr可以知道，之前那个cpu状态下，执行到何处了，如果我们能修改他（嘿嘿嘿，可以跳过一些关键代码，绕过一些判断），还有 SPSR
2.设置pc的值


32位模式编码



======
伪指令

adr = add、sub
ldr = mov

nop


---
swi
ldm stm
cpsr mode





